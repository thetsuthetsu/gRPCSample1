# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import simple_pb2 as proto_dot_simple__pb2


class SimpleServiceStub(object):
    """interface
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SimpleSend = channel.unary_unary(
                '/simple.SimpleService/SimpleSend',
                request_serializer=proto_dot_simple__pb2.SimpleRequest.SerializeToString,
                response_deserializer=proto_dot_simple__pb2.SimpleResponse.FromString,
                )
        self.ListSend = channel.unary_unary(
                '/simple.SimpleService/ListSend',
                request_serializer=proto_dot_simple__pb2.ListRequest.SerializeToString,
                response_deserializer=proto_dot_simple__pb2.ListResponse.FromString,
                )
        self.DictSend = channel.unary_unary(
                '/simple.SimpleService/DictSend',
                request_serializer=proto_dot_simple__pb2.DictRequest.SerializeToString,
                response_deserializer=proto_dot_simple__pb2.DictResponse.FromString,
                )


class SimpleServiceServicer(object):
    """interface
    """

    def SimpleSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DictSend(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SimpleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SimpleSend': grpc.unary_unary_rpc_method_handler(
                    servicer.SimpleSend,
                    request_deserializer=proto_dot_simple__pb2.SimpleRequest.FromString,
                    response_serializer=proto_dot_simple__pb2.SimpleResponse.SerializeToString,
            ),
            'ListSend': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSend,
                    request_deserializer=proto_dot_simple__pb2.ListRequest.FromString,
                    response_serializer=proto_dot_simple__pb2.ListResponse.SerializeToString,
            ),
            'DictSend': grpc.unary_unary_rpc_method_handler(
                    servicer.DictSend,
                    request_deserializer=proto_dot_simple__pb2.DictRequest.FromString,
                    response_serializer=proto_dot_simple__pb2.DictResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'simple.SimpleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SimpleService(object):
    """interface
    """

    @staticmethod
    def SimpleSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simple.SimpleService/SimpleSend',
            proto_dot_simple__pb2.SimpleRequest.SerializeToString,
            proto_dot_simple__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simple.SimpleService/ListSend',
            proto_dot_simple__pb2.ListRequest.SerializeToString,
            proto_dot_simple__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DictSend(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/simple.SimpleService/DictSend',
            proto_dot_simple__pb2.DictRequest.SerializeToString,
            proto_dot_simple__pb2.DictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
